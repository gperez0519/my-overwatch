"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3PersistenceAdapter = void 0;
const ask_sdk_core_1 = require("ask-sdk-core");
const aws_sdk_1 = require("aws-sdk");
const path = require("path");
const ObjectKeyGenerators_1 = require("./ObjectKeyGenerators");
/**
 * Implementation of {@link PersistenceAdapter} using AWS S3
 */
class S3PersistenceAdapter {
    constructor(config) {
        this.bucketName = config.bucketName;
        this.s3Client = config.s3Client ? config.s3Client : new aws_sdk_1.S3({ apiVersion: 'latest' });
        this.objectKeyGenerator = config.objectKeyGenerator ? config.objectKeyGenerator : ObjectKeyGenerators_1.ObjectKeyGenerators.userId;
        this.pathPrefix = config.pathPrefix ? config.pathPrefix : '';
    }
    /**
     * Retrieves persistence attributes from AWS S3.
     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate object key.
     * @returns {Promise<Object.<string, any>>}
     */
    async getAttributes(requestEnvelope) {
        const objectId = path.join(this.pathPrefix, this.objectKeyGenerator(requestEnvelope));
        const getParams = {
            Bucket: this.bucketName,
            Key: objectId,
        };
        let data;
        try {
            data = await this.s3Client.getObject(getParams).promise();
        }
        catch (err) {
            if (err.code === 'NoSuchKey') {
                return {};
            }
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not read item (${objectId}) from bucket (${getParams.Bucket}): ${err.message}`);
        }
        const bodyString = data.Body ? data.Body.toString() : '';
        let bodyObj;
        try {
            bodyObj = bodyString ? JSON.parse(bodyString) : {};
        }
        catch (err) {
            throw new SyntaxError(`Failed trying to parse the data body: ${data.Body.toString()}`);
        }
        return bodyObj;
    }
    /**
     * Saves persistence attributes to AWS S3.
     * @param {RequestEnvelope} requestEnvelope Request envelope used to generate object key.
     * @param {Object.<string, any>} attributes Attributes to be saved to DynamoDB.
     * @return {Promise<void>}
     */
    async saveAttributes(requestEnvelope, attributes) {
        const objectId = path.join(this.pathPrefix, this.objectKeyGenerator(requestEnvelope));
        const putParams = {
            Bucket: this.bucketName,
            Key: objectId,
            Body: JSON.stringify(attributes),
        };
        try {
            await this.s3Client.putObject(putParams).promise();
        }
        catch (err) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not save item (${objectId}) to bucket (${putParams.Bucket}): ${err.message}`);
        }
    }
    async deleteAttributes(requestEnvelope) {
        const objectId = path.join(this.pathPrefix, this.objectKeyGenerator(requestEnvelope));
        const deleteParams = {
            Bucket: this.bucketName,
            Key: objectId,
        };
        try {
            await this.s3Client.deleteObject(deleteParams).promise();
        }
        catch (err) {
            throw ask_sdk_core_1.createAskSdkError(this.constructor.name, `Could not delete item (${objectId}) from bucket (${deleteParams.Bucket}): ${err.message}`);
        }
    }
}
exports.S3PersistenceAdapter = S3PersistenceAdapter;
//# sourceMappingURL=S3PersistenceAdapter.js.map